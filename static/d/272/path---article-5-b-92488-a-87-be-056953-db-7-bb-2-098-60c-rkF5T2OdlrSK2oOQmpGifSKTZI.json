{"data":{"mongodbDatabaseArticles":{"id":"5b92488a87be056953db7bb2","content":"<div><p>I got this pesky problem this week where PHP doesn't like to json_encode erroneous infinite (Inf) and not available (NaN) values. These might result due to math formulas in your code applied to bad (or missing) data. This is incredibly stupid because with PHP's serialize() function NaN and Inf encode fine.</p> <blockquote><p> &gt; echo json_encode($array);<br> \"\"<br> &gt; echo json_last_error_msg();<br> Inf and NaN cannot be JSON encoded </p></blockquote> <p>PHP's json_encode() function actually returns blank if it gets an error. You'll need to use json_last_error_msg() to find out what's happening. I gave up fixing the source of the data problem as it took too much time with 100,000 values. So I came up with this smart but dirty trick:</p> <p> json_encode(unserialize(str_replace(array('NAN;','INF;'),'0;',serialize($reply)))); </p> <p>We literally just str_replace NAN and INF with 0 and the data encodes to JSON successfully. This works because serialize doesn't care about NaN or Inf while json_encode does. </p> <p>Good luck, have fun! And don't let PHP's arbitrary rules win!</p> <p>P.S. I just wrote a book on bootstrapping indie startups called <a href=\"//makebook.io/\">MAKE</a>. And I'm now on <a href=\"//instagram.com/levelsio\">Instagram</a> and <a href=\"//twitter.com/levelsio\">Twitter</a> too if you'd like to follow more of my adventures. I don't use email so <a href=\"//twitter.com/levelsio\">tweet me</a> your questions. If you like what I'm doing, consider backing me on <a href=\"//www.patreon.com/levelsio\">Patreon</a>. </p><p></p>  </div>","title":"Fixing “Inf and NaN cannot be JSON encoded” in PHP the easy way"}},"pageContext":{"id":"5b92488a87be056953db7bb2"}}