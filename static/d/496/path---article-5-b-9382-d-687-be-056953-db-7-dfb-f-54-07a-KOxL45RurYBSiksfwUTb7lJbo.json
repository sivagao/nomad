{"data":{"mongodbDatabaseArticles":{"id":"5b9382d687be056953db7dfb","content":"<div><h1 name=\"56f8\" id=\"56f8\" class=\"graf graf--h3 graf--leading graf--title\">Be careful when using Firebase Remote Config control for pre-announced feature</h1><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*EB84q1gQaQ9c0cPtV3-f_A.png\"><p name=\"0b77\" id=\"0b77\" class=\"graf graf--p graf-after--figure\"><a href=\"https://firebase.google.com/docs/remote-config/\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\">Firebase Remote Config</a> is an excellent tool that enables us to ship a feature hidden from the user, and get turned on at the designated time. However, if we are not careful, the hidden feature might be exposed without us knowing it. Read on how that happens.</p><h3 name=\"81d1\" id=\"81d1\" class=\"graf graf--h3 graf-after--p\">Background</h3><h4 name=\"9a3b\" id=\"9a3b\" class=\"graf graf--h4 graf-after--h3\">Typical Flow</h4><p name=\"86af\" id=\"86af\" class=\"graf graf--p graf-after--h4\">As shown in diagram below, in normal convention, by default the Feature is turned OFF in Firebase. Hence the Feature is not seen in the App. As the Feature get turned on in Firebase, it will be visible to the Phone. Excellent!</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*iCeJ7eRzlgrKok0lSqyj0Q.png\">App get the Feature ON or OFF per the Firebase Remote Config&#160;Setting<h4 name=\"fe90\" id=\"fe90\" class=\"graf graf--h4 graf-after--figure\">Caching Protection</h4><p name=\"64e5\" id=\"64e5\" class=\"graf graf--p graf-after--h4\">However, in reality, we would want to use the Firebase provided caching mechanism, to ensure user doesn&#8217;t get spammed with tans of Firebase Remote Config changes immediately if the changes occur more frequently than we desire.</p><p name=\"4a99\" id=\"4a99\" class=\"graf graf--p graf-after--pullquote\">Hence the behavior would be like the diagram below. This is still all good, as we have the Feature ON ahead, and the user only get to view them later.</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*fOli4EKxEY9pt_fOY40yiw.png\">App only get the Feature ON after the cached value&#160;expired.<h3 name=\"8013\" id=\"8013\" class=\"graf graf--h3 graf-after--figure\">Description of&#160;Problem</h3><p name=\"8994\" id=\"8994\" class=\"graf graf--p graf-after--h3\">However in reality, before we ship our product, we would like to perform end to end testing. Hence we turn on the Feature first, to ensure our Firebase Remote Config works accordingly.</p><p name=\"78c1\" id=\"78c1\" class=\"graf graf--p graf-after--p\">This inadvertently, post a risk, as the actual external user that uses the App at that time might be caching the value too, even though the feature is no available in the App yet. They can&#8217;t see it, but the value is cached.</p><p name=\"9b6b\" id=\"9b6b\" class=\"graf graf--p graf-after--p\">Upon shipping of the latest version of the App, when the user launch the App, since it is still retaining the ON value from the cache, the Feature in the app would be ON!! This is like a leak of your Feature known to the market place before actual time!!</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*7XITPT6jjdebG18eiP5rAQ.png\">The App having the Cache ON value that was used for testing, and hence the hidden feature is now visible!!<h4 name=\"a2d2\" id=\"a2d2\" class=\"graf graf--h4 graf-after--figure\">Resolution to the&#160;Problem</h4><p name=\"e732\" id=\"e732\" class=\"graf graf--p graf-after--h4\">To solve the problem, should be quite straightforward. We just need to turn OFF the Feature in Firebase, and leave it OFF for at least the minimum duration of the Cache, if not longer, before ship the App to the store.</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*fWd5l1ssh0ADsLLEwAl0AA.png\">Product shipped after the Feature OFF longer than the Cache&#160;Time.<h3 name=\"a36d\" id=\"a36d\" class=\"graf graf--h3 graf-after--figure\">More Problem to Take&#160;Note!</h3><p name=\"8115\" id=\"8115\" class=\"graf graf--p graf-after--h3\">If you&#8217;re thinking that&#8217;s all&#8230; Sorry, there&#8217;s another loophole.</p><p name=\"7970\" id=\"7970\" class=\"graf graf--p graf-after--p\">Assume we follow the convention described above, where we shipped the App after we have successfully turn OFF the Feature in Firebase, and waited longer than the Cache time. That&#8217;s all good.</p><p name=\"34c9\" id=\"34c9\" class=\"graf graf--p graf-after--p\">As we shipped, the user get the latest app automatically downloaded to his phone. But he has not launch the App, so no latest Firebase Remote Config value is fetched. He might have the cached value stored.</p><p name=\"9768\" id=\"9768\" class=\"graf graf--p graf-after--p\">Assuming at the time he launch the App, the Internet is Down; the Firebase Remote Config fetch would fail. This means the App would use the Cache value, which is ON. This also means this hidden feature will be fully visible (assuming this is an offline feature), as long as the internet is not back and the refetching is not happening!! Ouch!!!</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*xV7qnDiTk9UN9zl0e1mAJQ.png\"></div>","title":"Be careful when using Firebase Remote Config control for pre-announced feature"}},"pageContext":{"id":"5b9382d687be056953db7dfb"}}