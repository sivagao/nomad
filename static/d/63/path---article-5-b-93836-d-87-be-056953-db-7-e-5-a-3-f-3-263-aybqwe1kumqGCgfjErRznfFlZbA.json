{"data":{"mongodbDatabaseArticles":{"id":"5b93836d87be056953db7e5a","content":"<div><p class=\"section-inner sectionLayout--insetColumn\"><h1 name=\"6ce5\" id=\"6ce5\" class=\"graf graf--h3 graf--leading graf--title\">iOS remote push notifications in a&#160;nutshell</h1></p><p>What you need is the Development SSL Certificate(clarification regarding development vs. productions certificates provided at the end of the article) , click on the Create Certificate Button , and follow the instructions to create a CSR File . In short, hold CMD + Space to start the spotlight search on your Mac, write Keychain Access, and press enter to launch the Keychain Access App :</p><p>There should be an Edit Button at the bottom, click it and find Push Notifications in that list again:</p><p>Step 3, get APNs certificate: Go to your Apple Dev Member Center Account and log in. Click Certificates, IDs &amp; Profiles -&gt; Identifiers -&gt; App IDs where you should see all your app identifiers, select the one you are creating the notifications for. You will see a big list of Application Services available &#8212; Push Notifications should be marked as configurable:</p><p>Step 2, enabling APNs: In Xcode, go to your Targets , under your app&#8217;s name, select Capabilities and find Push Notifications in the list , switch to ON :</p><p>Step 1, project set-up: Like anything else you are probably learning these days about iOS apps, it all starts with creating a project. That is right, mine is named Unicorner. The idea is simple &#8212; when a fellow unicorner user sees a unicorn and takes a picture of it, every user will receive that picture in a notification .</p><p>However, before seeing any of the APNs magic happen, there is some configuration to be done! It will help us protect our precious remote notifications from possible invaders &#8212; &#8220;robust, secure, and highly efficient&#8221; from the definition does sound scarier now but don&#8217;t you worry!</p><p>Way too many things probably but all useful. Still, as the title of the article goes, I am going to concentrate upon displaying messages, media and actions . Nobody likes a know-it-all anyways, right?</p><p>Here is what you can do with APNs these days:</p><p>And I understand it as somewhat fancier words for just saying &#8220;This is how you remind users about the fact that they have your app installed on their phones&#8221; . I also see there: &#8220;Better make use of this robust feature, dude/lady!&#8221;. And this is exactly what we are going to do in this guide!</p><p>Well if you ask the folks at Apple, they will probably direct you to this page on their website where they describe notifications as follows:</p><p name=\"1d0d\" id=\"1d0d\" class=\"graf graf--p graf-after--figure\">Properly fill in the Certificate Information and make sure you save the&#160;<strong class=\"markup--strong markup--p-strong\">.certSigningRequest file</strong> at an easy-to-find place because then you need to upload it here:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*GyQBWv6lshFd3XNCsCThcA.png\">Upload CSR file&#160;screen<p name=\"78b6\" id=\"78b6\" class=\"graf graf--p graf-after--figure\">Do that. Then you will get this screen:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*zIaI4Dn_fyH6oTRIg98iuQ.png\">Download&#160;.cer file&#160;screen<p name=\"1bc7\" id=\"1bc7\" class=\"graf graf--p graf-after--figure\">Download the generated <strong class=\"markup--strong markup--p-strong\">Certificate</strong>, double-click the&#160;.<strong class=\"markup--strong markup--p-strong\">cer file</strong> and find it it installed in your <strong class=\"markup--strong markup--p-strong\">Keychain Access</strong>:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*DWDmNFl3JwfSDyU_hTAYaA.png\"><p name=\"8c11\" id=\"8c11\" class=\"graf graf--p graf-after--figure\">This step was a long one but worth it. Follow these steps again <strong class=\"markup--strong markup--p-strong\">Certificates, IDs &amp; Profiles -&gt; Identifiers -&gt; App IDs </strong>and you should see <strong class=\"markup--strong markup--p-strong\">that Push Notifications</strong> are now enabled for <strong class=\"markup--strong markup--p-strong\">Development</strong>:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*w2SA16f8r_-c8TRYRdexZA.png\">Developer Push Notifications enabled<p name=\"1644\" id=\"1644\" class=\"graf graf--p graf-after--figure\"><strong class=\"markup--strong markup--p-strong\">Step 4, some code finally: </strong>Lengthy configuration, I know, but as mentioned earlier, security is security. Time to code!</p><p name=\"a89b\" id=\"a89b\" class=\"graf graf--p graf-after--p\">Go back to the project and open the <strong class=\"markup--strong markup--p-strong\">AppDelegate.swift</strong> file. This is where we are going to ask the user for a permission to receive notifications from us before we try sending some &#129412;.</p><p name=\"c17c\" id=\"c17c\" class=\"graf graf--p graf-after--p\">On top of your <strong class=\"markup--strong markup--p-strong\">AppDelegate.swift</strong> file, first:</p><pre name=\"c0c1\" id=\"c0c1\" class=\"graf graf--pre graf-after--p\">import UserNotifications</pre><p name=\"1eb9\" id=\"1eb9\" class=\"graf graf--p graf-after--pre\">Then within the AppDelegate class, add this function:</p><p class=\"aspectRatioPlaceholder-fill\"></p><p class=\"iframeContainer\"></p>registerForPushNotifications function and what it does with comments.<p name=\"caf6\" id=\"caf6\" class=\"graf graf--p graf-after--figure\">Well, what is the code above actually doing? It is quite straightforward&#8202;&#8212;&#8202;we access the instance of the <strong class=\"markup--strong markup--p-strong\">UserNotificationCenter</strong>, and then ask it to authorize us to send push notifications to the user in the form of alerts, sounds and badge app numbers. If granted, we call the <strong class=\"markup--strong markup--p-strong\">registerForRemoteNotifications()</strong> function of the <strong class=\"markup--strong markup--p-strong\">shared application</strong> instance on the main thread. We need to explicitly do it on the main thread or else, we would get the annoying error saying that we are calling the function on a background thread &#128517;.</p><p name=\"9b78\" id=\"9b78\" class=\"graf graf--p graf-after--p\">Then we call <strong class=\"markup--strong markup--p-strong\">registerForPushNotifications()</strong> function at the end of <strong class=\"markup--strong markup--p-strong\">application(_:didFinishLaunchingWithOptions:) </strong>but before the <strong class=\"markup--strong markup--p-strong\">return true</strong> statement, like this:</p><p class=\"aspectRatioPlaceholder-fill\"></p><p class=\"iframeContainer\"></p>Calling registerForPushNotifications in the proper place.<p name=\"dc12\" id=\"dc12\" class=\"graf graf--p graf-after--figure\">In that way, we make sure the user is asked to register for push notifications at the start of the application. Run the project to see this:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*AHqpMbMi7n8mbf8J8LXgYA.png\">Notification Authorization within&#160;App<p name=\"88a9\" id=\"88a9\" class=\"graf graf--p graf-after--figure\">The picture is quite self-explanatory, so, do press <strong class=\"markup--strong markup--p-strong\">Allow</strong>, and voila, notifications will be received when sent! However, there is a pitfall to bear in mind in general&#8202;&#8212;&#8202;a user can always disallow push notifications authorization in the phone&#8217;s settings. <strong class=\"markup--strong markup--p-strong\">We are not going to think about it now but such situation should be handled in a production app!</strong></p><p name=\"d196\" id=\"d196\" class=\"graf graf--p graf-after--p\">Ok, lets continue. There&#8217;s two more delegate functions (whose purpose is obvious I believe&#8202;&#8212;&#8202;one gets us the device token, the other one checks for errors if any) to implement before we see any <strong class=\"markup--strong markup--p-strong\">Push Notification</strong> action:</p><p class=\"aspectRatioPlaceholder-fill\"></p><p class=\"iframeContainer\"></p>Converting the device token or printing out an error code.<p name=\"e58a\" id=\"e58a\" class=\"graf graf--p graf-after--figure\">The code in the <strong class=\"markup--strong markup--p-strong\">didRegister&#160;&#8230; function</strong> may seem weird at first but all it does is stringify the token for us so we can use it within the Pusher App.</p><p name=\"f93a\" id=\"f93a\" class=\"graf graf--p graf-after--p\"><strong class=\"markup--strong markup--p-strong\">Step 5, sending a notification finally: </strong>Open Pusher after installing it:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*iZUMnU-8MFJtdGUUWWxX1Q.png\">Default start-up for&#160;Pusher<p name=\"6faf\" id=\"6faf\" class=\"graf graf--p graf-after--figure\">There is a drop-down menu where Pusher automatically detects what Push Certificates you already have in your Keychain Access. Click it and pick the one that corresponds to your app, like this:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*lZ1D5HX8FoHqH55TvpH3dg.png\">Example Push Certificate<p name=\"78e2\" id=\"78e2\" class=\"graf graf--p graf-after--figure\">Then in the next field, paste in your <strong class=\"markup--strong markup--p-strong\">Device Token </strong>which you should see in the Xcode console on every start-up of your app when permission to send <strong class=\"markup--strong markup--p-strong\">PNs</strong> is granted (Please note that a device token may change when you delete and re-install the app on your device). What I got for a token in my console is this:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*cHjU3qmnwxNWlllNOBl3fg.png\">Example Device&#160;Token<p name=\"c4e0\" id=\"c4e0\" class=\"graf graf--p graf-after--figure\">Luckily, Pusher comes with a super-simple default payload which is just a JSON dictionary with specific Apple-defined keys (no worries, they can be more than three). What do Pusher&#8217;s given JSON keys mean?</p><ul class=\"postList\"><li name=\"01a9\" id=\"01a9\" class=\"graf graf--li graf-after--p\">the <strong class=\"markup--strong markup--li-strong\">alert</strong> key is going to display just a standart alert with a message saying &#8220;Testing&#160;&#8230;.&#8221;.</li><li name=\"4b35\" id=\"4b35\" class=\"graf graf--li graf-after--li\">the <strong class=\"markup--strong markup--li-strong\">badge</strong> key will just modify the badge of your app icon, this time to the number 1(it can be any number, indeed).</li><li name=\"bc6d\" id=\"bc6d\" class=\"graf graf--li graf-after--li\">the <strong class=\"markup--strong markup--li-strong\">sound</strong> key is quite obvious, the notification will just play the default sound.</li></ul><p name=\"6ba8\" id=\"6ba8\" class=\"graf graf--p graf-after--li\">All right, the app is built and running on our real device, the needed certificate is added, the device token too, lets press the <strong class=\"markup--strong markup--p-strong\">Push Button</strong> in <strong class=\"markup--strong markup--p-strong\">Pusher</strong> and see some magic happen:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*zIc4h8AVeNxqVS0JmtMi0Q.gif\">Testing simple notification<p name=\"968b\" id=\"968b\" class=\"graf graf--p graf-after--figure\">Yey, it works. Not very impressive because of no unicorns present. Eh, we will get there! (If you want to know what a notification payload can carry, read<a href=\"https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/PayloadKeyReference.html\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\"> here</a> and<a href=\"https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html#//apple_ref/doc/uid/TP40008194-CH10-SW1\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\"> here</a>.)</p><h4 name=\"0dde\" id=\"0dde\" class=\"graf graf--h4 graf-after--p\"><strong class=\"markup--strong markup--h4-strong\">Adding media attachments</strong></h4><p name=\"8d49\" id=\"8d49\" class=\"graf graf--p graf-after--h4\">Well, well, we made it to actually sending a notification with some alert in it. Not bad but surely, most of us have received more sophisticated notifications (pictures, gifs, etc.), right? So, how to do that? I have two words for you&#8202;&#8212;&#8202;<strong class=\"markup--strong markup--p-strong\">Service Extension</strong>. A <strong class=\"markup--strong markup--p-strong\">Service Extension</strong> intercepts push payloads from apps, and gives you the chance to change content in the notification before it is presented.</p><p name=\"6199\" id=\"6199\" class=\"graf graf--p graf-after--p\">As it is written on the <a href=\"https://developer.apple.com/app-extensions/\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\">Apple website</a>:</p><blockquote name=\"b408\" id=\"b408\" class=\"graf graf--blockquote graf-after--p\">App extensions give users access to your app&#8217;s functionality and content throughout iOS and macOS.</blockquote><p name=\"b2d0\" id=\"b2d0\" class=\"graf graf--p graf-after--blockquote\">And that is what the <strong class=\"markup--strong markup--p-strong\">Service Extension</strong> will do for us and our notifications&#8202;&#8212;&#8202;it will help us give users notifications with fancier appearance &#127882;.</p><p name=\"49ca\" id=\"49ca\" class=\"graf graf--p graf-after--p\">Enough jibber-jabber and more work! In Xcode, go to <strong class=\"markup--strong markup--p-strong\">File-&gt;New-&gt;Target&#8230; </strong>like this:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*MEqh_mQ_Ut3WTIcjPOqzDQ.png\"><strong class=\"markup--strong markup--figure-strong\">File-&gt;New-&gt;Target&#8230; </strong>selection<p name=\"4135\" id=\"4135\" class=\"graf graf--p graf-after--figure\">Then in the next menu, under <strong class=\"markup--strong markup--p-strong\">iOS</strong>, <strong class=\"markup--strong markup--p-strong\">Filter &#8220;service&#8221; </strong>and choose <strong class=\"markup--strong markup--p-strong\">Notification Service Extension</strong> like so:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*x7Q_Vfx2hBZ1X6ID6ikyOw.png\">Filtering Notification Service Extension<p name=\"9931\" id=\"9931\" class=\"graf graf--p graf-after--figure\">Click the <strong class=\"markup--strong markup--p-strong\">Next Button</strong> and give it a name of your choosing. I am going to name mine <strong class=\"markup--strong markup--p-strong\">NotificationService</strong>. Click <strong class=\"markup--strong markup--p-strong\">Finish</strong>. What we are going to get is a new group of two files created for us:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*trKKf3HmYrRbRU6kC-_BKA.png\">Notification Service file&#160;group<p name=\"3156\" id=\"3156\" class=\"graf graf--p graf-after--figure\">Go ahead and open the <strong class=\"markup--strong markup--p-strong\">NotificationService.swift</strong> file. Do take the time to checkout the code written for us by Xcode. The <strong class=\"markup--strong markup--p-strong\">didReceive(_:withContentHandler:) function</strong> is the one that is the more important because that is where we can modify the notification to our liking.</p><p name=\"6058\" id=\"6058\" class=\"graf graf--p graf-after--p\">Before that, we need to go to our <strong class=\"markup--strong markup--p-strong\">payload aps dictionary</strong> and make sure we add this key-value pair if we actually want to use a <strong class=\"markup--strong markup--p-strong\">notification extension </strong>of any kind:</p><pre name=\"63a8\" id=\"63a8\" class=\"graf graf--pre graf-after--p\">  &#8220;mutable-content&#8221;:1</pre><p name=\"1142\" id=\"1142\" class=\"graf graf--p graf-after--pre\">It<strong class=\"markup--strong markup--p-strong\"> </strong>signifies that the OS should initiate the service extension of the app and do some extra processing.</p><p name=\"3335\" id=\"3335\" class=\"graf graf--p graf-after--p\">The other thing that I will add to the payload now is an example unicorn image URL. I will imagine that someone took a picture of a unicorn and uploaded it to the server and that is why I, as a user, am getting notified. This is the final payload:</p><p name=\"dc4b\" id=\"dc4b\" class=\"graf graf--p graf-after--pre\">Now it is time to go back to the <strong class=\"markup--strong markup--p-strong\">NotificationService.swift</strong> file and switch it up a bit. Apple team did provide some code ready for us but I would like to change it so that it handles the transformation of just a URL to an image attachment properly. For that I will need from this particular function (comments added on the side so it makes sense a bit more):</p><p class=\"aspectRatioPlaceholder-fill\"></p><p class=\"iframeContainer\"></p>A helper function to download an image from the internet using a url and return it as a notification attachment.<p name=\"d573\" id=\"d573\" class=\"graf graf--p graf-after--figure\">Well, we do have the function that will do the magic for us. Well, let&#8217;s use it in the <a href=\"https://developer.apple.com/reference/usernotifications/unnotificationserviceextension/1648229-didreceive\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener nofollow noopener\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">didReceive(_:withContentHandler:)</strong></a><strong class=\"markup--strong markup--p-strong\"> method</strong>. This is what it should look like:</p><p class=\"aspectRatioPlaceholder-fill\"></p><p class=\"iframeContainer\"></p>Implementing the download function within the didReceive method and attaching the downloaded image.<p name=\"830d\" id=\"830d\" class=\"graf graf--p graf-after--figure\">All these steps may seem magical at first so do take the time to make sure you understand them&#8202;&#8212;&#8202;all they do is just dig into the<strong class=\"markup--strong markup--p-strong\"> aps dictionary</strong> to extract the values. Then indeed, do test it to see a cool unicorn image show up in the notification &#128527; &#129412;, like below:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*CwwMFNTGDkckzrwjq1M5kw.gif\">Testing notification with&#160;image.<h4 name=\"7550\" id=\"7550\" class=\"graf graf--h4 graf-after--figure\">Adding custom&#160;actions</h4><p name=\"b37f\" id=\"b37f\" class=\"graf graf--p graf-after--h4\">Well, good job till now I would say. Still, we want to make things even more fancier, like adding some custom actions? What I have in mind are a <strong class=\"markup--strong markup--p-strong\">Like</strong> and a <strong class=\"markup--strong markup--p-strong\">Save actions</strong>&#8202;&#8212;&#8202;for liking a picture and for saving a picture respectively.</p><p name=\"feae\" id=\"feae\" class=\"graf graf--p graf-after--p\">Ok, go back to the <strong class=\"markup--strong markup--p-strong\">NotificationService.swift</strong> file and between // 4. and // 5, add a // 6. like this:</p><p class=\"aspectRatioPlaceholder-fill\"></p><p class=\"iframeContainer\"></p>Adding actions.<p name=\"53fe\" id=\"53fe\" class=\"graf graf--p graf-after--figure\">All that is done here is creating the two actions wanted and adding them under a common category(<strong class=\"markup--strong markup--p-strong\">&#8220;unicorning&#8221;, </strong>so original!). That same common category will go in the <strong class=\"markup--strong markup--p-strong\">aps Notification payload</strong> we send from Pusher. And that is how the <strong class=\"markup--strong markup--p-strong\">Notification Service</strong> would know what notification actions to show! Simple, right?</p><p name=\"fe3a\" id=\"fe3a\" class=\"graf graf--p graf-after--p\">Alright, try it out! If you do, you will see that when you use the force touch or pull down to see the bigger notification, you will see the custom actions show up there too, like this:</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*2kPg0IGsngN5yzHBUf_Ufg.gif\">Testing notification with&#160;actions.<p name=\"e661\" id=\"e661\" class=\"graf graf--p graf-after--figure\">To be honest, we are not ready yet, because if you think about it, we are not handling these custom actions anywhere. The place to do that is in the <strong class=\"markup--strong markup--p-strong\">AppDelegate.swift</strong> file. Just add this optional func before closing the <strong class=\"markup--strong markup--p-strong\">AppDelegate</strong> class:</p><pre name=\"2770\" id=\"2770\" class=\"graf graf--pre graf-after--p\">func userNotificationCenter(_ center: <a href=\"\" class=\"markup--anchor markup--pre-anchor\" rel=\"nofollow noopener\" target=\"_blank\">UNUserNotificationCenter</a>, didReceive response: <a href=\"\" class=\"markup--anchor markup--pre-anchor\" rel=\"nofollow noopener\" target=\"_blank\">UNNotificationResponse</a>, withCompletionHandler completionHandler: @escaping () -&gt; <a href=\"\" class=\"markup--anchor markup--pre-anchor\" rel=\"nofollow noopener\" target=\"_blank\">Void</a>)</pre><p name=\"404e\" id=\"404e\" class=\"graf graf--p graf-after--pre\">What it does is intercept the notification response for us. Within the response, we can check whether the user chose any of the custom actions provided and proceed with app logics based on that. The way I handled the actions, for demo purposes only, is just by printing out statements on the console, like so:</p><p class=\"aspectRatioPlaceholder-fill\"></p><p class=\"iframeContainer\"></p>Code for demo handling of custom actions<p name=\"ae80\" id=\"ae80\" class=\"graf graf--p graf-after--figure\">Go ahead, test it out and see some not so fancy prints showing up on the console and the concept I am explaining proven! Indeed, in a real app, you would want to have some real and thoughtful logics happen when a user chooses your custom actions.</p><p class=\"aspectRatioPlaceholder-fill\"></p><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1600/1*JJtRRBnRuJIzcXULnPyhaA.png\">Printing on the&#160;console.<h4 name=\"7012\" id=\"7012\" class=\"graf graf--h4 graf-after--figure\"><strong class=\"markup--strong markup--h4-strong\">Conclusion</strong></h4><p name=\"f7c7\" id=\"f7c7\" class=\"graf graf--p graf-after--h4 graf--trailing\">After so much work done, probably it is best to go for a short conclusion, right? That is, I hope I not only helped you familiarize yourselves with APNs but also got you to put &#8220;Digging deeper in the APNs and playing with some ideas&#8221; topic on your bucket list! Because trust me, there is so much more to it &#128515;.</p></div>","title":"iOS remote push notifications in a nutshell – Flawless App Stories – Medium"}},"pageContext":{"id":"5b93836d87be056953db7e5a"}}